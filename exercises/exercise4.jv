// Author: Omer Khan Jadoon

pipeline TemperaturePipeline {

    TemperatureHttpExtractor
        -> TemperatureZipArchiveInterpreter
        -> TemperatureCSVFilePicker
        -> TemperatureTextFileInterpreter
        -> TemperatureCSVInterpreter
        -> HeaderWriter
         -> HeaderWriter2
        -> TemperatureTableInterpreter
        -> TemperatureTableTransformer
        -> BatteryTemperatureTableTransformer 
        -> TemperatureLoader;

    valuetype Month oftype text {
        constraints: [ MonthFormat ];
    }

    constraint MonthFormat oftype AllowlistConstraint {
        allowlist: [
            "Januar", "Februar", "MÃ¤rz", "April", "Mai", "Juni",
            "Juli", "August", "September", "Oktober", "November", "Dezember"
        ];
    }



    block TemperatureHttpExtractor oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    } 

    block TemperatureZipArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
         
    }

    block TemperatureCSVFilePicker oftype FilePicker {
        path: "/data.csv";
    }

    block TemperatureTextFileInterpreter oftype TextFileInterpreter {
        encoding: "utf8";
    }

    block TemperatureCSVInterpreter oftype CSVInterpreter {
        delimiter: ';';
    }



    block HeaderWriter oftype CellWriter {
        at: range A1:E1;
        write: ["id", "producer", "model", "month", "temperature"];
    }

     block HeaderWriter2 oftype CellWriter {
        at: cell J1;
        write: [ "battery_temperature"];
    }

 

    transform CelsiusToFahrenheit {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;
        Fahrenheit: (Celsius * 9/5) + 32;
    }

    block TemperatureTableTransformer oftype TableTransformer {
        inputColumns: ["temperature"];
        outputColumn: "temperature";
        use: CelsiusToFahrenheit;
    }




    block BatteryTemperatureTableTransformer oftype TableTransformer {
        inputColumns: ["battery_temperature"];
        outputColumn: "battery_temperature";
        use: CelsiusToFahrenheit;
    }

    block TemperatureTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype integer ,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype Month,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    block TemperatureLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }

}
